% Author: Olivia Giltner / okg0005@gmail.com
% Date: 2024-09-01
% Assignment Name: hw00

% The following class defines 3 functions for each problem respectively.
% Please follow the instruction inside each function. 

classdef hw00 
    methods (Static)

        function a_m = p1(m)
            % This function takes an integer m and returns the term a_m in the sequence defined by 
            % a_0 = 0, a_1 = 1, a_2 = 1, and a_n = a_{n-1} + a_{n-2} + a_{n-3} for n >= 3.
            % :param m: an integer
            % :return: the m-th term in the sequence

            if m < 0
                error('m must be a non-negative integer')
            else 
                a_m = inf; % Write your code here

            end

        end

        function det_A = p2(A)
            % This function takes a matrix A of size n x n and returns the determinant of A.
            % :param A: a matrix of size n x n
            % :return: the determinant of A

            if size(A,1) ~= size(A,2)
                error('A must be a square matrix')
            else
                det_A = inf;% Write your code here, note when you call p2 function inside your function, you need to call it like this: hw00.p2(B), where B is a matrix.
if m == 0
                a_m = 0;
                return;
            elseif m == 1 || m == 2
                a_m = 1;
                return;
            end
            a = zeros(1, m+1);
            a(1) = 0;
            a(2) = 1;
            a(3) = 1;
            for i = 4:m+1
                a(i) = a(i-1) + a(i-2) + a(i-3);
            end
    a_m = a(m+1);
        end
                function detA = p2(A)
                    [n, m] = size(A);
                    if n ~= m
                        error('Must be square lol');
                    end
                    if n == 1
                        detA = A(1,1);
                        return;
                    end
                    if n == 2
                        detA = A(1,1)*A(2,2) - A(1,2)*A(2,1);
                        return;
                    end
                    detA = 0;
                    for j = 1:n
                        subMatrix = A(2:end, [1:j-1, j+1:end]);
                        cofactor = (-1)^(1+j) * A(1,j) * p2(subMatrix);
                        detA = detA + cofactor;
                    end
            end


    

        function p3()
            % This function should have a run time about 1 second.
            % :return: no returns

            % Write your code here
 tic;
%             for i=1:2
%                 toc
                disp('runtime');
                java.lang.Thread.sleep(1000);
%             end
        end
    end
end

